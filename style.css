        /*Para comentar no CSS utiliza-se a tag que vc está vendo. CSS significa Cascading StyleSheet ou folha de estilo em cascata*/
        /*o elemento id se marca dentro do style com "#" e o elemento class é com o "."*/
        /*no site "www.figma.com" vc desenha a página*/
        /*root se refere a raíz do html inteiro*/
        
         :root {
            /*variáveis CSS*/
            --color-background: #F0F0F7;
            --color-primary-lighter: #9871F5;
            --color-primary-light: #916BEA;
            --color-primary: #8257E5;
            --color-primary-dark: #774DD6;
            --color-primary-darker: #6842c2;
            --color-secondary: #04D361;
            --color-secondary-dark: #04BF58;
            --color-title-in-primary: #FFFFFF;
            --color-text-in-primary: #D4C2FF;
            --color-text-title: #32264D;
            --color-text-complement: #9C98A6;
            --color-text-base: #6A6180;
            --color-line-in-white: #E6E6F0;
            --color-input-background: #F8F8FC;
            --color-button-text: #FFFFFF;
            --color-box-base: #FFFFFF;
            --color-box-footer: #FAFAFC;
            --color-small-info: #C1BCCC;
            /*tamanho da fonte padrão: 16px - 100% - 1rem*/
            font-size: 60%;
            /* controle das medidas rem */
        }
        /*para desenvolver uma aplicação responsiva, pensando no mobile first, deve-se usar 
        porcentagem e rem pq são mais flexíveis. Ao contrário de px.*/
        /*porcentagem é relativo ao que estiver acima dele 
            e o rem(ou em) é relativo a font do root, px não*/
        
        * {
            /*a tag "*" significa muitos elementos*/
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            /*o box sizing é como a caixa vai ser medida, geral mente a caixa é medida pelo tamanho do conteúdo, mas nesse caso foi alterado para ser medido pela borda da caixa.*/
            /*a borda do tipo "solid" que dizer que ela é uma linha.*/
        }
        
        html,
        body {
            height: 100vh;
            /*vh é uma unidade de medida(viewport height)*/
        }
        
        body {
            background: var(--color-background);
            display: flex;
            /*o html naturalmente coloca os itens com a tag h um abaixo 
                 do outro enquanto os outros com a tag p, a, entre outor são colocados sempre 
                 que possível na mesma linha. mas o "display flex" quebra esse padrão, colocando os elementos um ao lado do outro*/
            align-items: center;
            justify-content: center;
            /*vai justificar todo o conteudo ao centro*/
        }
        
        body,
        input,
        button,
        textarea {
            /*font: 500 1.6rem Poppins;*/
            font-weight: 500;
            font-family: Poppins;
            font-size: 1.6rem;
            color: var(--color-text-base);
        }
        /*por esses elementos terem muita força no browser, é melhor colocar eles assim 
            agrupados. caso contrário, eu coloque no body por exemplo, ele pode não pegar em 
            todos os elementos, por exemplo os botões*/
        
        #container {
            width: 90vw;
            /*vantagem de se usar a unidade "vw" é que ela se adapta a tela, 
                pois ela divide a tela em 100 quadradinhos pra cada lado. para ver marque o 
                conteiner colocando uma borda vermelha "border: solid red;"*/
            max-width: 700px;
            /*box model - vc pode descomentar o código para ve-lo em ação e comentar o anterior para não dar conflito.*/
            /*border: 1px solid red; 
                padding 10px 40px 100px; 
                margin: 40px 10px;*/
        }